import 'package:bookly/Core/Utils/Entities/book_entities.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../../../Config/Routes/next_screen.dart';import '../../../../Config/Routes/route_app.dart';import '../../../../Feature/Home/presentation/manager/MainCubit/main_cubit.dart';import '../../Resources/icons.dart';import '../../Resources/methods.dart';import '../../Resources/text_style.dart';import '../custom_books_image.dart';class ListViewBooksVertical extends StatefulWidget {  final List<BookEntities> items;  final bool? deleteIcon;  const ListViewBooksVertical(      {super.key, required this.items, this.deleteIcon});  @override  State<ListViewBooksVertical> createState() => _ListViewBooksVerticalState();}class _ListViewBooksVerticalState extends State<ListViewBooksVertical> {  late final GlobalKey<AnimatedListState> keyList;  @override  void initState() {    super.initState();    keyList = GlobalKey<AnimatedListState>();  }  @override  Widget build(BuildContext context) {    return BlocBuilder<MainCubit, MainState>(      builder: (context, state) {        return AnimatedList(            key: keyList,            scrollDirection: Axis.vertical,            physics: const ClampingScrollPhysics(),            initialItemCount: widget.items.length,            shrinkWrap: true,            itemBuilder: (context, index, animation) {              {                var item = widget.items[index];                if (widget.deleteIcon == null || !widget.deleteIcon!) {                  return _BookView(item: item);                } else {                  return _BookViewWithDeleteIcon(                    item: item,                    index: index,                    keyList: keyList,                  );                }              }            });      },    );  }}class _BookViewWithDeleteIcon extends StatelessWidget {  const _BookViewWithDeleteIcon({    required this.item,    required this.index,    required this.keyList,  });  final BookEntities item;  final int index;  final GlobalKey<AnimatedListState> keyList;  @override  Widget build(BuildContext context) {    return Row(      children: [        Expanded(child: _BookView(item: item)),        IconButton(          icon: const Icon(            Icons.delete,            color: Colors.red,          ),          onPressed: () {            MainCubit.get(context).removeBookMap(item, index);            keyList.currentState!.removeItem(              index,              (context, animation) => const SizedBox.shrink(),            );          },        )      ],    );  }}class _BookView extends StatelessWidget {  final BookEntities item;  const _BookView({required this.item});  @override  Widget build(BuildContext context) {    return Row(      children: [        SizedBox(          width: MediaQuery.of(context).size.width * .25,          child: Hero(            tag: item.id,            child: CustomBooksImage(imageUrl: item.imageLinks ?? ""),          ),        ),        Expanded(          child: Padding(            padding: const EdgeInsets.only(left: 20, right: 20),            child: AnimatedContainer(              duration: const Duration(milliseconds: 500),              curve: Curves.easeInOut,              child: Column(                crossAxisAlignment: CrossAxisAlignment.start,                children: [                  InkWell(                      onTap: () => pushNext(context, AppRoutes.viewBooksRoute,                          arguments: item),                      child: Text(                        item.title.toString(),                        style: Styles.textStyle20,                        maxLines: 2,                      )),                  Text(                    printName(item.authors!),                    style: Styles.textStyle14                        .copyWith(color: const Color(0xffc4c1c1)),                  ),                  const SizedBox(                    height: 10,                  ),                  Row(                    mainAxisAlignment: MainAxisAlignment.spaceBetween,                    children: [                      Text(                        isFree(item.saleInfo!),                        style: Styles.textStyle20.copyWith(                            fontWeight: FontWeight.w700, fontSize: 15),                      ),                      Row(                        children: [                          AppIcons.starOfRating,                          Text(                            item.averageRating!.toDouble().toString(),                            style: Styles.textStyle14                                .copyWith(color: Colors.white),                          ),                          const SizedBox(                            width: 5,                          ),                          Text(                            '(${item.ratingsCount})',                            style: Styles.textStyle14                                .copyWith(color: const Color(0xff707070)),                          ),                        ],                      )                    ],                  )                ],              ),            ),          ),        )      ],    );  }}